package entities;

import java.util.List;
import java.util.Random;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityExistsException;
import jakarta.persistence.EntityNotFoundException;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToOne;
import jakarta.persistence.PersistenceException;
import jakarta.persistence.Table;
import jakarta.persistence.TransactionRequiredException;
import util.DAO;
import util.Manager;

@Entity
@Table (name="MATCHES")
public class Partido implements DAO<Partido>{
	private static Logger logger=LogManager.getLogger(Equipo.class.getName());

	@Id
	@GeneratedValue (strategy= GenerationType.IDENTITY)
	@Column (name="MATCH_ID")
	private int idPartido;
	@JoinColumn (name="LOCAL_TEAM_ID")
	@OneToOne (optional = false, cascade = CascadeType.ALL)
	private Equipo equipoLocal;
	@JoinColumn (name="VISITING_TEAM_ID")
	@OneToOne (optional = false, cascade = CascadeType.ALL)
	private Equipo equipoVisitante;
	@Column (name="RINK")
	private String pista;
	@Column (name="OUTCOME")
	private String resultado;
	
	private String jornada;
	
//getters y setters
	
	public int getIdPartido() {
		return idPartido;
	}

	public void setIdPartido(int idJornada) {
		this.idPartido = idJornada;
	}

	
	public String getPista() {
		return pista;
	}

	public void setPista(String pista) {
		this.pista = pista;
	}
	
	public Equipo getEquipoLocal() {
		return equipoLocal;
	}

	public void setEquipoLocal(Equipo equipoLocal) {
		this.equipoLocal = equipoLocal;
	}

	public Equipo getEquipoVisitante() {
		return equipoVisitante;
	}

	public void setEquipoVisitante(Equipo equipoVisitante) {
		this.equipoVisitante = equipoVisitante;
	}

	public String getResultado() {
		return resultado;
	}

	public void setResultado(String resultado) {
		this.resultado = resultado;
	}
	
	public void setJornada(String jornada) {
		this.jornada = jornada;
	}
	public String getJornada() {
		return jornada;
	}

	//constructor
	public Partido() {}
	
	public Partido(Equipo equipoLocal, Equipo equipoVisitante) {
		this.equipoLocal=equipoLocal;
		this.equipoVisitante=equipoVisitante;
		this.pista=equipoLocal.getPista();
	}
	
	public void iniciar() {
		Random rnd = new Random();
		int ptosEquipoLocal=rnd.nextInt(4);
		int ptosEquipoVisitante=0;
		
		switch (ptosEquipoLocal) {
		case 0:
			ptosEquipoVisitante=3;
			this.resultado="0-3";
			break;
			
		case 1:
			ptosEquipoVisitante=2;
			this.resultado="1-2";
			break;
			
		case 2:
			ptosEquipoVisitante=1;
			this.resultado="2-1";
			break;
			
		case 3:
			ptosEquipoVisitante=0;
			this.resultado="3-0";
			break;
			
		}
		
		equipoLocal.setJornadasJugadasEnTemporadaActual(equipoLocal.getJornadasJugadasEnTemporadaActual()+1);
		equipoVisitante.setJornadasJugadasEnTemporadaActual(equipoVisitante.getJornadasJugadasEnTemporadaActual()+1);
		
		equipoLocal.setPuntos(equipoLocal.getPuntos()+ptosEquipoLocal);
		equipoVisitante.setPuntos(equipoVisitante.getPuntos()+ptosEquipoVisitante);
	}

	//DAO
	public void insert(Partido entity) {
		try {
			Manager.persist(entity);
		} catch (EntityExistsException entityExists) {
			System.err.println("Entity already exists");
			logger.error("Entity already exists - "+entityExists.getMessage()+"\nCaused by: "+entityExists.getCause());
		}catch (TransactionRequiredException transactionRequired) {
			System.err.println(transactionRequired.getMessage());
			logger.error("Error con la transacción al insertar - "+transactionRequired.getMessage());
		}catch(PersistenceException persistenceFailed) {
			System.err.println("Flush failed while inserting entity: Partido-");
			logger.error("Flush failed while inserting entity: Partido\nCaused by: "+persistenceFailed.getCause());
		}catch (Exception e) {
		}
		

		logger.info("el partido se ha insertado en orm_competicion");
		
	}

	public void delete(Partido entity) {
		// TODO Auto-generated method stub
		
	}

	public List<Partido> selectAll() {
		// TODO Auto-generated method stub
		return null;
	}

	public Partido select(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	public void update(Partido entity) {
		try {
			Manager.refresh(entity);
			
		}catch (EntityNotFoundException entityNotFound) {
			System.err.println("Entity already exists");
			logger.error("Entity can´t be found - "+entityNotFound.getMessage()+"\nCaused by: "+entityNotFound.getCause()); 
		
		}catch (TransactionRequiredException transactionRequired) {
			System.err.println(transactionRequired.getMessage());
			logger.error("Error con la transacción al actualizar:  - "+transactionRequired.getMessage());
		}catch(PersistenceException persistenceFailed) {
			System.err.println("Flush failed while updating entity: Patrocinador-");
			logger.error("Flush failed while updating entity: Patrocinador\nCaused by: "+persistenceFailed.getCause());
		}
		
	}

}
