package entities;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.logging.log4j.*;

import dao.CRUD;
import jakarta.persistence.CascadeType;

/**
 * Esta clase representa a un equipo en la liga, se genera la tabla TEAMS en la BDD
 * 
 * */

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityManager;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Query;
import jakarta.persistence.Table;
import util.Manager;

@Entity
@Table (name="TEAMS")
public class Equipo extends CRUD<Equipo>{
	private static Logger logger=LogManager.getLogger(Equipo.class.getName());
	@Column (name="TEAM_NAME")
	private String nombre;
	@Id
	@Column (name="TEAM_ID")
	@GeneratedValue (strategy=GenerationType.IDENTITY)
	private Long id;
	@Column (name="RINK")
	private String pista;
	
	@OneToMany (mappedBy="equipoActual")
	private Set<Deportista> jugadores=new HashSet<Deportista>();
	@Column (name="MATCHS_PLAYED")
	private int jornadasJugadasEnTemporadaActual;
	@Column (name="POINTS")
	private int puntos;

	@ManyToMany (cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	@JoinTable(
	        name = "TEAM_SPONSOR",
	        joinColumns = @JoinColumn(name = "TEAM_ID"),
	        inverseJoinColumns = @JoinColumn(name = "SPONSOR_ID")
	    )
	private Set<Patrocinador> patrocinadores= new HashSet<Patrocinador>();
	
//getters & setters
	
	public void addPatrocinador(Patrocinador patrocinador) {
	    Equipo equipoRecuperado=this.select(this.getId());
    	if(!equipoRecuperado.getPatrocinadores().contains(patrocinador)) {
    		 patrocinadores.add(patrocinador);
    		 //patrocinador.getEquipos().add(this);
    		 this.update(this);
 	    }
	}
	
	public String getNombre() {
		return nombre;
	}
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getPista() {
		return pista;
	}
	public void setPista(String pista) {
		this.pista = pista;
	}
	
	public int getJornadasJugadasEnTemporadaActual() {
		return jornadasJugadasEnTemporadaActual;
	}
	public void setJornadasJugadasEnTemporadaActual(int jornadasJugadasEnTemporadaActual) {
		this.jornadasJugadasEnTemporadaActual = jornadasJugadasEnTemporadaActual;
	}
	public void setPuntos(int puntos) {
		this.puntos = puntos;
	}
	public int getPuntos() {
		return puntos;
	}
	
	public void addPartido(int puntos) {
		jornadasJugadasEnTemporadaActual=jornadasJugadasEnTemporadaActual++;
		setPuntos(getPuntos()+puntos);
		this.update(this);
	}
	
	public void setJugadores(List<Deportista> jugadores) {
		this.jugadores.addAll(jugadores);
		
		for (Deportista deportista: getJugadores()) {
			deportista.setEquipoActual(this);
		}
	}
	
	public Set<Deportista> getJugadores() {
		return jugadores;
	}
	
	public void setPatrocinadores(List<Patrocinador> patrocinadores) {
		this.patrocinadores.addAll(patrocinadores);
		
		for(Patrocinador patrocinador: patrocinadores) {
			patrocinador.getEquipos().add(this);
			patrocinador.update(patrocinador);
		}
		
	}
	
	public Set<Patrocinador> getPatrocinadores() {
		return patrocinadores;
	}
	
	
//constructor
	
	public Equipo() {}
	
	public Equipo(String nombre, String pista) {
		this.nombre=nombre;
		this.pista=pista;
		this.jornadasJugadasEnTemporadaActual=0;
	}
	
//DAO
	public Equipo select(long id) {
		EntityManager manager = Manager.getEntityManagerFactory().createEntityManager();

		 String jpql = "SELECT e FROM Equipo e WHERE e.id = :id";
	     Query query = manager.createQuery(jpql, Equipo.class);
	     query.setParameter("id", id);
	
	        try {
	            return (Equipo) query.getSingleResult();
	        } catch (Exception e) {
	            System.err.println("EXCEPCION");
	            return null;
	        }
	}
	
}
