package entities;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.logging.log4j.*;

import jakarta.persistence.CascadeType;

/**
 * Esta clase representa a un equipo en la liga, se genera la tabla TEAMS en la BDD
 * 
 * */

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityExistsException;
import jakarta.persistence.EntityNotFoundException;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;
import jakarta.persistence.PersistenceException;
import jakarta.persistence.RollbackException;
import jakarta.persistence.Table;
import jakarta.persistence.TransactionRequiredException;
import util.DAO;
import util.Manager;

@Entity
@Table (name="TEAMS")
public class Equipo implements DAO<Equipo>{
	private static Logger logger=LogManager.getLogger(Equipo.class.getName());
	@Column (name="TEAM_NAME")
	private String nombre;
	@Id
	@Column (name="TEAM_ID")
	@GeneratedValue (strategy=GenerationType.IDENTITY)
	private int id;
	@Column (name="RINK")
	private String pista;
	/*@Column (name="GOALIE")
	private String goalKeeper;
	@Column (name="LEFT_WING")
	private String alaIzq;
	@Column (name="RIGHT_WING")
	private String alaDch;
	@Column (name="LEFT_DEFENSE")
	private String defensaIzq;
	@Column (name="RIGHT_DEFENSE")
	private String defensaDch;
	@Column (name="CENTRE")
	private String centro;*/
	
	@OneToMany (mappedBy="equipoActual")
	private Set<Deportista> jugadores=new HashSet<Deportista>();
	@Column (name="MATCHS_PLAYED")
	private int jornadasJugadasEnTemporadaActual;
	@Column (name="POINTS")
	private int puntos;

	@ManyToMany (cascade = {CascadeType.PERSIST, CascadeType.MERGE})
    @JoinTable(
        name = "TEAM_SPONSOR",
        joinColumns = @JoinColumn(name = "TEAM_ID"),
        inverseJoinColumns = @JoinColumn(name = "SPONSOR_ID")
    )
	private Set<Patrocinador> patrocinadores= new HashSet<Patrocinador>();
	
//getters & setters
	
	public String getNombre() {
		return nombre;
	}
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getPista() {
		return pista;
	}
	public void setPista(String pista) {
		this.pista = pista;
	}
	
	public int getJornadasJugadasEnTemporadaActual() {
		return jornadasJugadasEnTemporadaActual;
	}
	public void setJornadasJugadasEnTemporadaActual(int jornadasJugadasEnTemporadaActual) {
		this.jornadasJugadasEnTemporadaActual = jornadasJugadasEnTemporadaActual;
	}
	public void setPuntos(int puntos) {
		this.puntos = puntos;
	}
	public int getPuntos() {
		return puntos;
	}
	
	public void setJugadores(List<Deportista> jugadores) {
		this.jugadores.addAll(jugadores);
	}
	
	public Set<Deportista> getJugadores() {
		return jugadores;
	}
	
	public void setPatrocinadores(List<Patrocinador> patrocinadores) {
		this.patrocinadores.addAll(patrocinadores);
	}
	
	public Set<Patrocinador> getPatrocinadores() {
		return patrocinadores;
	}
	
	
//constructor
	
	public Equipo() {}
	
	public Equipo(String nombre, String pista) {
		this.nombre=nombre;
		this.pista=pista;
	}
	
//DAO
	
	public void insert(Equipo entity) {
		try {
			Manager.eManager.getTransaction().begin();
			Manager.eManager.persist(entity);
			Manager.eManager.getTransaction().commit();
			Manager.eManager.flush();
		} catch (EntityExistsException entityExists) {
			System.err.println("Entity: "+entity.getNombre()+" already exists");
			logger.error("Entity: "+entity.getNombre()+" already exists - "+entityExists.getMessage()+"\nCaused by: "+entityExists.getCause());
		}catch (TransactionRequiredException transactionRequired) {
			System.err.println(transactionRequired.getMessage());
			logger.error("Error con la transacción al insertar: "+getNombre()+" - "+transactionRequired.getMessage());
		}catch(PersistenceException persistenceFailed) {
			System.err.println("Flush failed while inserting entity: Equipo-"+getNombre());
			logger.error("Flush failed while inserting entity: Equipo-"+getNombre()+"\nCaused by: "+persistenceFailed.getCause());
		}
		

		logger.info("el equipo "+getNombre()+" se ha insertado en orm_competicion");
	}
	public void delete(Equipo entity) {
		try {
			Manager.eManager.getTransaction().begin();
			Manager.eManager.remove(entity);
			Manager.eManager.getTransaction().commit();
			Manager.eManager.flush();
			logger.warn("el equipo "+getNombre()+" se ha eliminado de orm_competicion");
			
		}catch (TransactionRequiredException transactionRequired) {
			System.err.println(transactionRequired.getMessage());
			logger.error("Error con la transacción al eliminar: "+getNombre()+" - "+transactionRequired.getMessage());
		}catch (RollbackException rollback) {
			System.err.println("Error: ha fallado un commit al intentar eliminar: "+getNombre()+" de la Tabla TEAMS.");
			logger.error("Ha fallado un commit al intentar eliminar: "+getNombre()+" de la Tabla TEAMS - "+rollback.getMessage());
		}catch(PersistenceException persistenceFailed) {
			System.err.println("Flush failed while deleting entity: Equipo-"+getNombre());
			logger.error("Flush failed while deleting entity: Equipo-"+getNombre()+"\nCaused by: "+persistenceFailed.getCause());
		}
	}
	public List<Equipo> selectAll() {
		Manager.eManager.getTransaction().begin();
		String sql = "SELECT * FROM TEAMS";
		List<Equipo> resultado =
		Manager.crearQuery(sql).getResultList();
		Manager.eManager.flush();
		return resultado;
	}
	public Equipo select(int id) {
		Manager.eManager.getTransaction().begin();
		String sql="SELECT * FROM TEAMS WHERE TEAM_ID=?";
		Equipo resultado= (Equipo) Manager.crearQuery(sql).setParameter(0, id).getResultList().get(0);
		return resultado;
	}
	public void update(Equipo entity) {
		try {
			Manager.eManager.getTransaction().begin();
			Manager.eManager.refresh(entity);
			Manager.eManager.getTransaction().commit();
			Manager.eManager.flush();
			
		}catch (EntityNotFoundException entityNotFound) {
			System.err.println("Entity: "+entity.getNombre()+" already exists");
			logger.error("Entity: "+entity.getNombre()+" can´t be found - "+entityNotFound.getMessage()+"\nCaused by: "+entityNotFound.getCause()); 
		
		}catch (TransactionRequiredException transactionRequired) {
			System.err.println(transactionRequired.getMessage());
			logger.error("Error con la transacción al actualizar: "+getNombre()+" - "+transactionRequired.getMessage());
		}catch(PersistenceException persistenceFailed) {
			System.err.println("Flush failed while updating entity: Equipo-"+getNombre());
			logger.error("Flush failed while updating entity: Equipo-"+getNombre()+"\nCaused by: "+persistenceFailed.getCause());
		}
		
	}
	
	
	
}
