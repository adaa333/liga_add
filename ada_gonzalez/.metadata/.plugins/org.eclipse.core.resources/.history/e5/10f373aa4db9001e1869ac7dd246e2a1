package entities;

import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityExistsException;
import jakarta.persistence.EntityNotFoundException;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.PersistenceException;
import jakarta.persistence.RollbackException;
import jakarta.persistence.Table;
import jakarta.persistence.TransactionRequiredException;
import util.DAO;
import util.Manager;

@Entity
@Table (name="SPONSORS")
public class Patrocinador implements DAO <Patrocinador>{
	
	@Id
	@GeneratedValue (strategy=GenerationType.IDENTITY)
	@Column(name="SPONSORS_ID")
	private int idPatrocinador;
	
	@Column (name="SPONSORS_NAME")
	private String name;
	
	@Column
	@ManyToMany (mappedBy="patrocinadores")
	private List<Equipo> equipos= new ArrayList<Equipo>();

	public int getIdPatrocinador() {
		return idPatrocinador;
	}

	public void setIdPatrocinador(int idPatrocinador) {
		this.idPatrocinador = idPatrocinador;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public List<Equipo> getEquipos() {
		return equipos;
	}

	public void setEquipos(List<Equipo> equipos) {
		this.equipos = equipos;
	}

	public Patrocinador(String name, List<Equipo> equipos) {
		this.name = name;
		this.equipos=equipos;
	}

//DAO
	public void insert(Deportista entity) {
		try {
			Manager.eManager.getTransaction().begin();
			Manager.eManager.persist(entity);
			Manager.eManager.getTransaction().commit();
			Manager.eManager.flush();
		} catch (EntityExistsException entityExists) {
			System.err.println("Entity: "+entity.getNombre()+" already exists");
			logger.error("Entity: "+entity.getNombre()+" already exists - "+entityExists.getMessage()+"\nCaused by: "+entityExists.getCause());
		}catch (TransactionRequiredException transactionRequired) {
			System.err.println(transactionRequired.getMessage());
			logger.error("Error con la transacción al insertar: "+getNombre()+" - "+transactionRequired.getMessage());
		}catch (RollbackException rollback) {
			System.err.println("Error: ha fallado un commit al intentar añadir: "+getNombre()+" de la Tabla SPORTSMEN.");
			logger.error("Ha fallado un commit al intentar añadir: "+getNombre()+" de la Tabla SPORTSMEN - "+rollback.getMessage());
		}catch(PersistenceException persistenceFailed) {
			System.err.println("Flush failed while inserting entity: Deportista-"+getNombre());
			logger.error("Flush failed while inserting entity: Deportista-"+getNombre()+"\nCaused by: "+persistenceFailed.getCause());
		}

		logger.info("el deportista "+getNombre()+" se ha insertado en orm_competicion");
	}
	public void delete(Deportista entity) {
		try {
			Manager.eManager.getTransaction().begin();
			Manager.eManager.remove(entity);
			Manager.eManager.getTransaction().commit();
			Manager.eManager.flush();
			logger.warn("el deportista "+getNombre()+" se ha eliminado de orm_competicion");
			
		}catch (TransactionRequiredException transactionRequired) {
			System.err.println(transactionRequired.getMessage());
			logger.error("Error con la transacción al eliminar: "+getNombre()+" - "+transactionRequired.getMessage());
		}catch (RollbackException rollback) {
			System.err.println("Error: ha fallado un commit al intentar eliminar: "+getNombre()+" de la Tabla SPORTSMEN.");
			logger.error("Ha fallado un commit al intentar eliminar: "+getNombre()+" de la Tabla SPORTSMEN - "+rollback.getMessage());
		}catch(PersistenceException persistenceFailed) {
			System.err.println("Flush failed while deleting entity: Deportista-"+getNombre());
			logger.error("Flush failed while deleting entity: Deportista-"+getNombre()+"\nCaused by: "+persistenceFailed.getCause());
		}
	}
	public List<Deportista> selectAll() {
		Manager.eManager.getTransaction().begin();
		String sql = "SELECT * FROM SPORTSMEN";
		List<Deportista> resultado =
		Manager.crearQuery(sql).getResultList();
		Manager.eManager.flush();
		return resultado;
	}
	public Deportista select(int id) {
		Manager.eManager.getTransaction().begin();
		String sql="SELECT * FROM SPORTSMEN WHERE SPORTSMEN_ID=?";
		Deportista resultado= (Deportista) Manager.crearQuery(sql).setParameter(0, id).getResultList().get(0);
		return resultado;
	}
	public void update(Deportista entity) {
		try {
			Manager.eManager.getTransaction().begin();
			Manager.eManager.refresh(entity);
			Manager.eManager.getTransaction().commit();
			Manager.eManager.flush();
			
		}catch (EntityNotFoundException entityNotFound) {
			System.err.println("Entity: "+entity.getNombre()+" already exists");
			logger.error("Entity: "+entity.getNombre()+" can´t be found - "+entityNotFound.getMessage()+"\nCaused by: "+entityNotFound.getCause()); 
		
		}catch (TransactionRequiredException transactionRequired) {
			System.err.println(transactionRequired.getMessage());
			logger.error("Error con la transacción al actualizar: "+getNombre()+" - "+transactionRequired.getMessage());
		}catch(PersistenceException persistenceFailed) {
			System.err.println("Flush failed while updating entity: Equipo-"+getNombre());
			logger.error("Flush failed while updating entity: Equipo-"+getNombre()+"\nCaused by: "+persistenceFailed.getCause());
		}
		
	}
	
	
}
